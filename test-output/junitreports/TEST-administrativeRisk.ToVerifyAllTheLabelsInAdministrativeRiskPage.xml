<?xml version="1.0" encoding="UTF-8"?>
<!-- Generated by org.testng.reporters.JUnitReportReporter -->
<testsuite skipped="26" hostname="DESKTOP-4SLAKQP" name="administrativeRisk.ToVerifyAllTheLabelsInAdministrativeRiskPage" tests="27" failures="0" timestamp="2023-05-08T18:42:02 IST" time="21.569" errors="1">
  <testcase name="driver" time="21.569" classname="administrativeRisk.ToVerifyAllTheLabelsInAdministrativeRiskPage">
    <error type="org.openqa.selenium.WebDriverException" message="java.net.ConnectException: Failed to connect to localhost/0:0:0:0:0:0:0:1:9980
Build info: version: &#039;3.141.59&#039;, revision: &#039;e82be7d358&#039;, time: &#039;2018-11-14T08:17:03&#039;
System info: host: &#039;DESKTOP-4SLAKQP&#039;, ip: &#039;192.168.0.100&#039;, os.name: &#039;Windows 10&#039;, os.arch: &#039;amd64&#039;, os.version: &#039;10.0&#039;, java.version: &#039;1.8.0_202&#039;
Driver info: driver.version: RemoteWebDriver">
      <![CDATA[org.openqa.selenium.WebDriverException: java.net.ConnectException: Failed to connect to localhost/0:0:0:0:0:0:0:1:9980
Build info: version: '3.141.59', revision: 'e82be7d358', time: '2018-11-14T08:17:03'
System info: host: 'DESKTOP-4SLAKQP', ip: '192.168.0.100', os.name: 'Windows 10', os.arch: 'amd64', os.version: '10.0', java.version: '1.8.0_202'
Driver info: driver.version: RemoteWebDriver
at org.openqa.selenium.remote.service.DriverCommandExecutor.execute(DriverCommandExecutor.java:92)
at org.openqa.selenium.remote.RemoteWebDriver.execute(RemoteWebDriver.java:552)
at org.openqa.selenium.remote.RemoteWebDriver.get(RemoteWebDriver.java:277)
at Generic_Liberary.BaseClass.driver(BaseClass.java:150)
at sun.reflect.GeneratedMethodAccessor13.invoke(Unknown Source)
at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
at java.lang.reflect.Method.invoke(Method.java:498)
at org.testng.internal.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:133)
at org.testng.internal.MethodInvocationHelper.invokeMethodConsideringTimeout(MethodInvocationHelper.java:62)
at org.testng.internal.ConfigInvoker.invokeConfigurationMethod(ConfigInvoker.java:385)
at org.testng.internal.ConfigInvoker.invokeConfigurations(ConfigInvoker.java:321)
at org.testng.TestRunner.invokeTestConfigurations(TestRunner.java:637)
at org.testng.TestRunner.beforeRun(TestRunner.java:627)
at org.testng.TestRunner.run(TestRunner.java:589)
at org.testng.SuiteRunner.runTest(SuiteRunner.java:377)
at org.testng.SuiteRunner.runSequentially(SuiteRunner.java:371)
at org.testng.SuiteRunner.privateRun(SuiteRunner.java:332)
at org.testng.SuiteRunner.run(SuiteRunner.java:276)
at org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:53)
at org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:96)
at org.testng.TestNG.runSuitesSequentially(TestNG.java:1212)
at org.testng.TestNG.runSuitesLocally(TestNG.java:1134)
at org.testng.TestNG.runSuites(TestNG.java:1063)
at org.testng.TestNG.run(TestNG.java:1031)
at org.testng.remote.AbstractRemoteTestNG.run(AbstractRemoteTestNG.java:115)
at org.testng.remote.RemoteTestNG.initAndRun(RemoteTestNG.java:251)
at org.testng.remote.RemoteTestNG.main(RemoteTestNG.java:77)
Caused by: java.net.ConnectException: Failed to connect to localhost/0:0:0:0:0:0:0:1:9980
at okhttp3.internal.connection.RealConnection.connectSocket(RealConnection.java:247)
at okhttp3.internal.connection.RealConnection.connect(RealConnection.java:165)
at okhttp3.internal.connection.StreamAllocation.findConnection(StreamAllocation.java:257)
at okhttp3.internal.connection.StreamAllocation.findHealthyConnection(StreamAllocation.java:135)
at okhttp3.internal.connection.StreamAllocation.newStream(StreamAllocation.java:114)
at okhttp3.internal.connection.ConnectInterceptor.intercept(ConnectInterceptor.java:42)
at okhttp3.internal.http.RealInterceptorChain.proceed(RealInterceptorChain.java:147)
at okhttp3.internal.http.RealInterceptorChain.proceed(RealInterceptorChain.java:121)
at okhttp3.internal.cache.CacheInterceptor.intercept(CacheInterceptor.java:93)
at okhttp3.internal.http.RealInterceptorChain.proceed(RealInterceptorChain.java:147)
at okhttp3.internal.http.RealInterceptorChain.proceed(RealInterceptorChain.java:121)
at okhttp3.internal.http.BridgeInterceptor.intercept(BridgeInterceptor.java:93)
at okhttp3.internal.http.RealInterceptorChain.proceed(RealInterceptorChain.java:147)
at okhttp3.internal.http.RetryAndFollowUpInterceptor.intercept(RetryAndFollowUpInterceptor.java:126)
at okhttp3.internal.http.RealInterceptorChain.proceed(RealInterceptorChain.java:147)
at okhttp3.internal.http.RealInterceptorChain.proceed(RealInterceptorChain.java:121)
at okhttp3.RealCall.getResponseWithInterceptorChain(RealCall.java:200)
at okhttp3.RealCall.execute(RealCall.java:77)
at org.openqa.selenium.remote.internal.OkHttpClient.execute(OkHttpClient.java:103)
at org.openqa.selenium.remote.HttpCommandExecutor.execute(HttpCommandExecutor.java:155)
at org.openqa.selenium.remote.service.DriverCommandExecutor.execute(DriverCommandExecutor.java:83)
... 26 more
Caused by: java.net.ConnectException: Connection refused: connect
at java.net.DualStackPlainSocketImpl.waitForConnect(Native Method)
at java.net.DualStackPlainSocketImpl.socketConnect(DualStackPlainSocketImpl.java:85)
at java.net.AbstractPlainSocketImpl.doConnect(AbstractPlainSocketImpl.java:350)
at java.net.AbstractPlainSocketImpl.connectToAddress(AbstractPlainSocketImpl.java:206)
at java.net.AbstractPlainSocketImpl.connect(AbstractPlainSocketImpl.java:188)
at java.net.PlainSocketImpl.connect(PlainSocketImpl.java:172)
at java.net.SocksSocketImpl.connect(SocksSocketImpl.java:392)
at java.net.Socket.connect(Socket.java:589)
at okhttp3.internal.platform.Platform.connectSocket(Platform.java:129)
at okhttp3.internal.connection.RealConnection.connectSocket(RealConnection.java:245)
... 46 more
]]>
    </error>
  </testcase> <!-- driver -->
  <system-out>
    <![CDATA[Chrome Browser launched successfully]]>
  </system-out>
  <testcase name="riskIdLabelInAdministrativeRisk" time="0.000" classname="administrativeRisk.ToVerifyAllTheLabelsInAdministrativeRiskPage">
    <skipped/>
  </testcase> <!-- riskIdLabelInAdministrativeRisk -->
  <system-out/>
  <testcase name="riskAgentLabelInAdministrativeRisk" time="0.000" classname="administrativeRisk.ToVerifyAllTheLabelsInAdministrativeRiskPage">
    <skipped/>
  </testcase> <!-- riskAgentLabelInAdministrativeRisk -->
  <system-out/>
  <testcase name="departmentNameLabelInAdministrativeRisk" time="0.000" classname="administrativeRisk.ToVerifyAllTheLabelsInAdministrativeRiskPage">
    <skipped/>
  </testcase> <!-- departmentNameLabelInAdministrativeRisk -->
  <system-out/>
  <testcase name="entityNameLabelInAdministrativeRisk" time="0.000" classname="administrativeRisk.ToVerifyAllTheLabelsInAdministrativeRiskPage">
    <skipped/>
  </testcase> <!-- entityNameLabelInAdministrativeRisk -->
  <system-out/>
  <testcase name="assessorLabelInAdministrativeRisk" time="0.000" classname="administrativeRisk.ToVerifyAllTheLabelsInAdministrativeRiskPage">
    <skipped/>
  </testcase> <!-- assessorLabelInAdministrativeRisk -->
  <system-out/>
  <testcase name="assessedLabelInAdministrativeRisk" time="0.000" classname="administrativeRisk.ToVerifyAllTheLabelsInAdministrativeRiskPage">
    <skipped/>
  </testcase> <!-- assessedLabelInAdministrativeRisk -->
  <system-out/>
  <testcase name="riskInputLabelInAdministrativeRisk" time="0.000" classname="administrativeRisk.ToVerifyAllTheLabelsInAdministrativeRiskPage">
    <skipped/>
  </testcase> <!-- riskInputLabelInAdministrativeRisk -->
  <system-out/>
  <testcase name="threatSourceLabelInAdministrativeRisk" time="0.000" classname="administrativeRisk.ToVerifyAllTheLabelsInAdministrativeRiskPage">
    <skipped/>
  </testcase> <!-- threatSourceLabelInAdministrativeRisk -->
  <system-out/>
  <testcase name="riskDescriptionLabelInAdministrativeRisk" time="0.000" classname="administrativeRisk.ToVerifyAllTheLabelsInAdministrativeRiskPage">
    <skipped/>
  </testcase> <!-- riskDescriptionLabelInAdministrativeRisk -->
  <system-out/>
  <testcase name="existingControlsLabelInAdministrativeRisk" time="0.000" classname="administrativeRisk.ToVerifyAllTheLabelsInAdministrativeRiskPage">
    <skipped/>
  </testcase> <!-- existingControlsLabelInAdministrativeRisk -->
  <system-out/>
  <testcase name="riskImpactCategoryLabelInAdministrativeRisk" time="0.000" classname="administrativeRisk.ToVerifyAllTheLabelsInAdministrativeRiskPage">
    <skipped/>
  </testcase> <!-- riskImpactCategoryLabelInAdministrativeRisk -->
  <system-out/>
  <testcase name="probabilityOfOccuranceLabelInAdministrativeRisk" time="0.000" classname="administrativeRisk.ToVerifyAllTheLabelsInAdministrativeRiskPage">
    <skipped/>
  </testcase> <!-- probabilityOfOccuranceLabelInAdministrativeRisk -->
  <system-out/>
  <testcase name="impactLevelLabelInAdministrativeRisk" time="0.000" classname="administrativeRisk.ToVerifyAllTheLabelsInAdministrativeRiskPage">
    <skipped/>
  </testcase> <!-- impactLevelLabelInAdministrativeRisk -->
  <system-out/>
  <testcase name="riskExposureLevelLabelInAdministrativeRisk" time="0.000" classname="administrativeRisk.ToVerifyAllTheLabelsInAdministrativeRiskPage">
    <skipped/>
  </testcase> <!-- riskExposureLevelLabelInAdministrativeRisk -->
  <system-out/>
  <testcase name="selectControlClassLabelInAdministrativeRisk" time="0.000" classname="administrativeRisk.ToVerifyAllTheLabelsInAdministrativeRiskPage">
    <skipped/>
  </testcase> <!-- selectControlClassLabelInAdministrativeRisk -->
  <system-out/>
  <testcase name="controlNameLabelInAdministrativeRisk" time="0.000" classname="administrativeRisk.ToVerifyAllTheLabelsInAdministrativeRiskPage">
    <skipped/>
  </testcase> <!-- controlNameLabelInAdministrativeRisk -->
  <system-out/>
  <testcase name="subControlNameLabelInAdministrativeRisk" time="0.000" classname="administrativeRisk.ToVerifyAllTheLabelsInAdministrativeRiskPage">
    <skipped/>
  </testcase> <!-- subControlNameLabelInAdministrativeRisk -->
  <system-out/>
  <testcase name="descriptionLabelInAdministrativeRisk" time="0.000" classname="administrativeRisk.ToVerifyAllTheLabelsInAdministrativeRiskPage">
    <skipped/>
  </testcase> <!-- descriptionLabelInAdministrativeRisk -->
  <system-out/>
  <testcase name="newControlsLabelInAdministrativeRisk" time="0.000" classname="administrativeRisk.ToVerifyAllTheLabelsInAdministrativeRiskPage">
    <skipped/>
  </testcase> <!-- newControlsLabelInAdministrativeRisk -->
  <system-out/>
  <testcase name="responsibleLabelInAdministrativeRisk" time="0.000" classname="administrativeRisk.ToVerifyAllTheLabelsInAdministrativeRiskPage">
    <skipped/>
  </testcase> <!-- responsibleLabelInAdministrativeRisk -->
  <system-out/>
  <testcase name="targetDateLabelInAdministrativeRisk" time="0.000" classname="administrativeRisk.ToVerifyAllTheLabelsInAdministrativeRiskPage">
    <skipped/>
  </testcase> <!-- targetDateLabelInAdministrativeRisk -->
  <system-out/>
  <testcase name="targetQuarterLabelInAdministrativeRisk" time="0.000" classname="administrativeRisk.ToVerifyAllTheLabelsInAdministrativeRiskPage">
    <skipped/>
  </testcase> <!-- targetQuarterLabelInAdministrativeRisk -->
  <system-out/>
  <testcase name="responsibleDeptLabelInAdministrativeRisk" time="0.000" classname="administrativeRisk.ToVerifyAllTheLabelsInAdministrativeRiskPage">
    <skipped/>
  </testcase> <!-- responsibleDeptLabelInAdministrativeRisk -->
  <system-out/>
  <testcase name="riskResponseLabelInAdministrativeRisk" time="0.000" classname="administrativeRisk.ToVerifyAllTheLabelsInAdministrativeRiskPage">
    <skipped/>
  </testcase> <!-- riskResponseLabelInAdministrativeRisk -->
  <system-out/>
  <testcase name="statusLabelInAdministrativeRisk" time="0.000" classname="administrativeRisk.ToVerifyAllTheLabelsInAdministrativeRiskPage">
    <skipped/>
  </testcase> <!-- statusLabelInAdministrativeRisk -->
  <system-out/>
  <testcase name="closedDateLabelInAdministrativeRisk" time="0.000" classname="administrativeRisk.ToVerifyAllTheLabelsInAdministrativeRiskPage">
    <skipped/>
  </testcase> <!-- closedDateLabelInAdministrativeRisk -->
  <system-out/>
</testsuite> <!-- administrativeRisk.ToVerifyAllTheLabelsInAdministrativeRiskPage -->
